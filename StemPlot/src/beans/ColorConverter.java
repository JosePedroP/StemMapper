package beans;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Set;

public class ColorConverter {

	protected static final String[] indexcolors_false = new String[]{
		"rgb(0,0,0,0.95)","rgb(255,25,0,0.95)","rgb(178,35,0,0.95)","rgb(255,76,0,0.95)","rgb(178,71,0,0.95)","rgb(255,127,0,0.95)","rgb(255,153,0,0.95)","rgb(178,124,0,0.95)","rgb(255,204,0,0.95)","rgb(178,160,0,0.95)","rgb(255,255,0,0.95)","rgb(229,255,0,0.95)","rgb(142,178,0,0.95)","rgb(178,255,0,0.95)","rgb(107,178,0,0.95)","rgb(127,255,0,0.95)","rgb(101,255,0,0.95)","rgb(53,178,0,0.95)","rgb(51,255,0,0.95)","rgb(17,178,0,0.95)","rgb(0,255,0,0.95)","rgb(0,255,25,0.95)","rgb(0,178,35,0.95)","rgb(0,255,76,0.95)","rgb(0,178,71,0.95)","rgb(0,255,127,0.95)","rgb(0,255,153,0.95)","rgb(0,178,124,0.95)","rgb(0,255,203,0.95)","rgb(0,178,160,0.95)","rgb(0,127,127,0.95)","rgb(0,229,255,0.95)","rgb(0,142,178,0.95)","rgb(0,178,255,0.95)","rgb(0,107,178,0.95)","rgb(0,127,255,0.95)","rgb(0,102,255,0.95)","rgb(89,116,178,0.95)","rgb(0,51,255,0.95)","rgb(53,66,178,0.95)","rgb(0,0,255,0.95)","rgb(25,0,255,0.95)","rgb(78,53,178,0.95)","rgb(76,0,255,0.95)","rgb(142,102,204,0.95)","rgb(127,0,255,0.95)","rgb(153,0,255,0.95)","rgb(201,76,255,0.95)","rgb(204,0,255,0.95)","rgb(237,76,255,0.95)","rgb(255,0,255,0.95)","rgb(255,0,229,0.95)","rgb(178,0,142,0.95)","rgb(255,0,178,0.95)","rgb(178,0,107,0.95)","rgb(255,0,127,0.95)","rgb(255,0,102,0.95)","rgb(178,0,53,0.95)","rgb(255,0,51,0.95)","rgb(178,0,17,0.95)","rgb(127,63,63,0.95)"
	};
//	 
	protected static final String[] indexcolors = new String[]{
		"rgb(0,0,0,0.95)","rgb(184,129,131,0.95)","rgb(146,35,41,0.95)",
		"rgb(90,0,7,0.95)","rgb(215,191,194,0.95)","rgb(216,106,120,0.95)",
		"rgb(255,138,154,0.95)","rgb(59,0,10,0.95)","rgb(226,0,39,0.95)",
		"rgb(148,58,77,0.95)","rgb(91,78,81,0.95)","rgb(176,91,111,0.95)",
		"rgb(254,178,198,0.95)","rgb(216,61,102,0.95)","rgb(137,85,99,0.95)",
		"rgb(255,26,89,0.95)","rgb(255,219,229,0.95)","rgb(204,7,68,0.95)",
		"rgb(203,126,152,0.95)","rgb(153,125,135,0.95)","rgb(106,58,76,0.95)",
		"rgb(255,47,128,0.95)","rgb(107,0,44,0.95)","rgb(167,69,113,0.95)",
		"rgb(198,0,90,0.95)","rgb(255,93,167,0.95)","rgb(48,0,24,0.95)",
		"rgb(184,148,166,0.95)","rgb(255,144,201,0.95)","rgb(124,101,113,0.95)",
		"rgb(163,0,89,0.95)","rgb(218,0,124,0.95)","rgb(91,17,60,0.95)",
		"rgb(64,35,52,0.95)","rgb(209,87,160,0.95)","rgb(221,182,208,0.95)",
		"rgb(136,85,120,0.95)","rgb(150,43,117,0.95)","rgb(169,115,153,0.95)",
		"rgb(210,0,150,0.95)","rgb(231,115,206,0.95)","rgb(170,81,153,0.95)",
		"rgb(231,4,196,0.95)","rgb(107,58,100,0.95)","rgb(255,160,242,0.95)",
		"rgb(111,0,98,0.95)","rgb(185,3,170,0.95)","rgb(200,149,197,0.95)",
		"rgb(255,52,255,0.95)","rgb(50,0,51,0.95)","rgb(219,213,221,0.95)",
		"rgb(238,195,255,0.95)","rgb(188,35,255,0.95)","rgb(103,17,144,0.95)",
		"rgb(32,22,37,0.95)","rgb(245,225,255,0.95)","rgb(188,101,233,0.95)",
		"rgb(215,144,255,0.95)","rgb(114,65,143,0.95)","rgb(74,59,83,0.95)",
		"rgb(149,86,189,0.95)","rgb(180,168,189,0.95)","rgb(121,0,215,0.95)",
		"rgb(160,121,191,0.95)","rgb(149,138,159,0.95)","rgb(131,115,147,0.95)",
		"rgb(100,84,123,0.95)","rgb(58,36,101,0.95)","rgb(53,51,57,0.95)",
		"rgb(188,177,229,0.95)","rgb(159,148,240,0.95)","rgb(150,149,197,0.95)",
		"rgb(0,0,166,0.95)","rgb(0,0,53,0.95)","rgb(99,99,117,0.95)",
		"rgb(0,0,95,0.95)","rgb(151,151,158,0.95)","rgb(122,123,255,0.95)",
		"rgb(60,62,110,0.95)","rgb(99,103,169,0.95)","rgb(73,75,90,0.95)",
		"rgb(59,93,255,0.95)","rgb(200,208,246,0.95)","rgb(109,128,186,0.95)",
		"rgb(143,176,255,0.95)","rgb(0,69,210,0.95)","rgb(122,135,161,0.95)",
		"rgb(50,78,114,0.95)","rgb(0,72,156,0.95)","rgb(0,96,205,0.95)",
		"rgb(120,158,201,0.95)","rgb(1,44,88,0.95)","rgb(153,173,192,0.95)",
		"rgb(0,19,37,0.95)","rgb(221,239,255,0.95)","rgb(89,115,138,0.95)",
		"rgb(0,134,237,0.95)","rgb(117,121,124,0.95)","rgb(189,201,210,0.95)",
		"rgb(62,137,190,0.95)","rgb(140,208,255,0.95)","rgb(10,163,247,0.95)",
		"rgb(107,148,170,0.95)","rgb(41,96,124,0.95)","rgb(64,78,85,0.95)",
		"rgb(0,111,166,0.95)","rgb(1,51,73,0.95)","rgb(10,166,216,0.95)",
		"rgb(101,129,136,0.95)","rgb(94,188,209,0.95)","rgb(69,109,117,0.95)",
		"rgb(0,137,163,0.95)","rgb(181,244,255,0.95)","rgb(2,82,95,0.95)",
		"rgb(28,230,255,0.95)","rgb(0,28,30,0.95)","rgb(32,59,60,0.95)",
		"rgb(163,200,201,0.95)","rgb(0,166,170,0.95)","rgb(0,198,200,0.95)",
		"rgb(0,106,102,0.95)","rgb(81,138,135,0.95)","rgb(228,255,252,0.95)",
		"rgb(102,225,211,0.95)","rgb(0,77,67,0.95)","rgb(128,150,147,0.95)",
		"rgb(21,160,138,0.95)","rgb(0,132,111,0.95)","rgb(0,194,160,0.95)",
		"rgb(0,254,207,0.95)","rgb(120,175,161,0.95)","rgb(2,104,78,0.95)",
		"rgb(194,255,237,0.95)","rgb(71,103,93,0.95)","rgb(0,216,145,0.95)",
		"rgb(0,75,40,0.95)","rgb(138,219,180,0.95)","rgb(12,189,102,0.95)",
		"rgb(84,158,121,0.95)","rgb(26,58,42,0.95)","rgb(108,143,125,0.95)",
		"rgb(0,137,65,0.95)","rgb(99,255,172,0.95)","rgb(27,225,119,0.95)",
		"rgb(0,108,49,0.95)","rgb(181,214,195,0.95)","rgb(61,79,68,0.95)",
		"rgb(75,129,96,0.95)","rgb(102,121,109,0.95)","rgb(113,187,140,0.95)",
		"rgb(4,247,87,0.95)","rgb(0,30,9,0.95)","rgb(210,220,213,0.95)",
		"rgb(0,180,51,0.95)","rgb(159,178,164,0.95)","rgb(0,49,9,0.95)",
		"rgb(163,243,171,0.95)","rgb(69,102,72,0.95)","rgb(81,160,88,0.95)",
		"rgb(131,164,133,0.95)","rgb(126,211,121,0.95)","rgb(209,247,206,0.95)",
		"rgb(161,194,153,0.95)","rgb(6,18,3,0.95)","rgb(30,110,0,0.95)",
		"rgb(94,255,3,0.95)","rgb(85,129,59,0.95)","rgb(59,151,0,0.95)",
		"rgb(79,198,1,0.95)","rgb(27,68,0,0.95)","rgb(194,255,153,0.95)",
		"rgb(120,141,102,0.95)","rgb(134,142,126,0.95)","rgb(131,171,88,0.95)",
		"rgb(55,69,39,0.95)","rgb(152,208,88,0.95)","rgb(198,220,153,0.95)",
		"rgb(164,232,4,0.95)","rgb(118,145,47,0.95)","rgb(139,180,0,0.95)",
		"rgb(52,54,45,0.95)","rgb(76,96,1,0.95)","rgb(223,251,113,0.95)",
		"rgb(106,113,74,0.95)","rgb(34,40,0,0.95)","rgb(107,121,0,0.95)",
		"rgb(58,63,0,0.95)","rgb(190,196,89,0.95)","rgb(254,255,230,0.95)",
		"rgb(163,164,137,0.95)","rgb(159,160,100,0.95)","rgb(255,255,0,0.95)",
		"rgb(97,97,90,0.95)","rgb(255,255,254,0.95)","rgb(155,151,0,0.95)",
		"rgb(207,205,172,0.95)","rgb(121,120,104,0.95)","rgb(87,83,41,0.95)",
		"rgb(255,246,159,0.95)","rgb(141,133,70,0.95)","rgb(244,215,73,0.95)",
		"rgb(126,100,5,0.95)","rgb(29,23,2,0.95)","rgb(204,170,53,0.95)",
		"rgb(204,184,124,0.95)","rgb(69,60,35,0.95)","rgb(81,58,1,0.95)",
		"rgb(255,181,0,0.95)","rgb(167,117,0,0.95)","rgb(214,142,1,0.95)",
		"rgb(183,151,98,0.95)","rgb(122,73,0,0.95)","rgb(55,33,1,0.95)",
		"rgb(136,111,76,0.95)","rgb(164,91,2,0.95)","rgb(231,171,99,0.95)",
		"rgb(250,208,159,0.95)","rgb(192,185,178,0.95)","rgb(147,138,129,0.95)",
		"rgb(163,132,105,0.95)","rgb(209,97,0,0.95)","rgb(167,111,66,0.95)",
		"rgb(91,69,52,0.95)","rgb(91,50,19,0.95)","rgb(202,131,78,0.95)",
		"rgb(255,145,63,0.95)","rgb(149,63,0,0.95)","rgb(208,172,148,0.95)",
		"rgb(125,90,68,0.95)","rgb(190,71,0,0.95)","rgb(253,232,220,0.95)",
		"rgb(119,38,0,0.95)","rgb(160,88,55,0.95)","rgb(234,139,102,0.95)",
		"rgb(57,20,6,0.95)","rgb(255,104,50,0.95)","rgb(200,98,64,0.95)",
		"rgb(41,32,29,0.95)","rgb(183,123,104,0.95)","rgb(128,108,102,0.95)",
		"rgb(255,170,146,0.95)","rgb(137,65,46,0.95)","rgb(232,48,0,0.95)",
		"rgb(168,140,133,0.95)","rgb(247,201,191,0.95)","rgb(100,49,39,0.95)",
		"rgb(233,129,118,0.95)","rgb(123,79,75,0.95)","rgb(30,2,0,0.95)",
		"rgb(156,105,102,0.95)","rgb(191,86,80,0.95)","rgb(186,9,0,0.95)",
		"rgb(255,74,70,0.95)","rgb(244,171,170,0.95)","rgb(69,44,44,0.95)",
		"rgb(200,161,161,0.95)"
	};

	protected static final String[] indexcolors2_false = new String[]{
		"rgb(0,0,0)","rgb(255,25,0)","rgb(178,35,0)","rgb(255,76,0)","rgb(178,71,0)","rgb(255,127,0)","rgb(255,153,0)","rgb(178,124,0)","rgb(255,204,0)","rgb(178,160,0)","rgb(255,255,0)","rgb(229,255,0)","rgb(142,178,0)","rgb(178,255,0)","rgb(107,178,0)","rgb(127,255,0)","rgb(101,255,0)","rgb(53,178,0)","rgb(51,255,0)","rgb(17,178,0)","rgb(0,255,0)","rgb(0,255,25)","rgb(0,178,35)","rgb(0,255,76)","rgb(0,178,71)","rgb(0,255,127)","rgb(0,255,153)","rgb(0,178,124)","rgb(0,255,203)","rgb(0,178,160)","rgb(0,127,127)","rgb(0,229,255)","rgb(0,142,178)","rgb(0,178,255)","rgb(0,107,178)","rgb(0,127,255)","rgb(0,102,255)","rgb(89,116,178)","rgb(0,51,255)","rgb(53,66,178)","rgb(0,0,255)","rgb(25,0,255)","rgb(78,53,178)","rgb(76,0,255)","rgb(142,102,204)","rgb(127,0,255)","rgb(153,0,255)","rgb(201,76,255)","rgb(204,0,255)","rgb(237,76,255)","rgb(255,0,255)","rgb(255,0,229)","rgb(178,0,142)","rgb(255,0,178)","rgb(178,0,107)","rgb(255,0,127)","rgb(255,0,102)","rgb(178,0,53)","rgb(255,0,51)","rgb(178,0,17)","rgb(127,63,63)"
	};
	
	protected static final String[] indexcolors2 = new String[]{
		"rgb(0,0,0)","rgb(184,129,131)","rgb(146,35,41)",
		"rgb(90,0,7)","rgb(215,191,194)","rgb(216,106,120)",
		"rgb(255,138,154)","rgb(59,0,10)","rgb(226,0,39)",
		"rgb(148,58,77)","rgb(91,78,81)","rgb(176,91,111)",
		"rgb(254,178,198)","rgb(216,61,102)","rgb(137,85,99)",
		"rgb(255,26,89)","rgb(255,219,229)","rgb(204,7,68)",
		"rgb(203,126,152)","rgb(153,125,135)","rgb(106,58,76)",
		"rgb(255,47,128)","rgb(107,0,44)","rgb(167,69,113)",
		"rgb(198,0,90)","rgb(255,93,167)","rgb(48,0,24)",
		"rgb(184,148,166)","rgb(255,144,201)","rgb(124,101,113)",
		"rgb(163,0,89)","rgb(218,0,124)","rgb(91,17,60)",
		"rgb(64,35,52)","rgb(209,87,160)","rgb(221,182,208)",
		"rgb(136,85,120)","rgb(150,43,117)","rgb(169,115,153)",
		"rgb(210,0,150)","rgb(231,115,206)","rgb(170,81,153)",
		"rgb(231,4,196)","rgb(107,58,100)","rgb(255,160,242)",
		"rgb(111,0,98)","rgb(185,3,170)","rgb(200,149,197)",
		"rgb(255,52,255)","rgb(50,0,51)","rgb(219,213,221)",
		"rgb(238,195,255)","rgb(188,35,255)","rgb(103,17,144)",
		"rgb(32,22,37)","rgb(245,225,255)","rgb(188,101,233)",
		"rgb(215,144,255)","rgb(114,65,143)","rgb(74,59,83)",
		"rgb(149,86,189)","rgb(180,168,189)","rgb(121,0,215)",
		"rgb(160,121,191)","rgb(149,138,159)","rgb(131,115,147)",
		"rgb(100,84,123)","rgb(58,36,101)","rgb(53,51,57)",
		"rgb(188,177,229)","rgb(159,148,240)","rgb(150,149,197)",
		"rgb(0,0,166)","rgb(0,0,53)","rgb(99,99,117)",
		"rgb(0,0,95)","rgb(151,151,158)","rgb(122,123,255)",
		"rgb(60,62,110)","rgb(99,103,169)","rgb(73,75,90)",
		"rgb(59,93,255)","rgb(200,208,246)","rgb(109,128,186)",
		"rgb(143,176,255)","rgb(0,69,210)","rgb(122,135,161)",
		"rgb(50,78,114)","rgb(0,72,156)","rgb(0,96,205)",
		"rgb(120,158,201)","rgb(1,44,88)","rgb(153,173,192)",
		"rgb(0,19,37)","rgb(221,239,255)","rgb(89,115,138)",
		"rgb(0,134,237)","rgb(117,121,124)","rgb(189,201,210)",
		"rgb(62,137,190)","rgb(140,208,255)","rgb(10,163,247)",
		"rgb(107,148,170)","rgb(41,96,124)","rgb(64,78,85)",
		"rgb(0,111,166)","rgb(1,51,73)","rgb(10,166,216)",
		"rgb(101,129,136)","rgb(94,188,209)","rgb(69,109,117)",
		"rgb(0,137,163)","rgb(181,244,255)","rgb(2,82,95)",
		"rgb(28,230,255)","rgb(0,28,30)","rgb(32,59,60)",
		"rgb(163,200,201)","rgb(0,166,170)","rgb(0,198,200)",
		"rgb(0,106,102)","rgb(81,138,135)","rgb(228,255,252)",
		"rgb(102,225,211)","rgb(0,77,67)","rgb(128,150,147)",
		"rgb(21,160,138)","rgb(0,132,111)","rgb(0,194,160)",
		"rgb(0,254,207)","rgb(120,175,161)","rgb(2,104,78)",
		"rgb(194,255,237)","rgb(71,103,93)","rgb(0,216,145)",
		"rgb(0,75,40)","rgb(138,219,180)","rgb(12,189,102)",
		"rgb(84,158,121)","rgb(26,58,42)","rgb(108,143,125)",
		"rgb(0,137,65)","rgb(99,255,172)","rgb(27,225,119)",
		"rgb(0,108,49)","rgb(181,214,195)","rgb(61,79,68)",
		"rgb(75,129,96)","rgb(102,121,109)","rgb(113,187,140)",
		"rgb(4,247,87)","rgb(0,30,9)","rgb(210,220,213)",
		"rgb(0,180,51)","rgb(159,178,164)","rgb(0,49,9)",
		"rgb(163,243,171)","rgb(69,102,72)","rgb(81,160,88)",
		"rgb(131,164,133)","rgb(126,211,121)","rgb(209,247,206)",
		"rgb(161,194,153)","rgb(6,18,3)","rgb(30,110,0)",
		"rgb(94,255,3)","rgb(85,129,59)","rgb(59,151,0)",
		"rgb(79,198,1)","rgb(27,68,0)","rgb(194,255,153)",
		"rgb(120,141,102)","rgb(134,142,126)","rgb(131,171,88)",
		"rgb(55,69,39)","rgb(152,208,88)","rgb(198,220,153)",
		"rgb(164,232,4)","rgb(118,145,47)","rgb(139,180,0)",
		"rgb(52,54,45)","rgb(76,96,1)","rgb(223,251,113)",
		"rgb(106,113,74)","rgb(34,40,0)","rgb(107,121,0)",
		"rgb(58,63,0)","rgb(190,196,89)","rgb(254,255,230)",
		"rgb(163,164,137)","rgb(159,160,100)","rgb(255,255,0)",
		"rgb(97,97,90)","rgb(255,255,254)","rgb(155,151,0)",
		"rgb(207,205,172)","rgb(121,120,104)","rgb(87,83,41)",
		"rgb(255,246,159)","rgb(141,133,70)","rgb(244,215,73)",
		"rgb(126,100,5)","rgb(29,23,2)","rgb(204,170,53)",
		"rgb(204,184,124)","rgb(69,60,35)","rgb(81,58,1)",
		"rgb(255,181,0)","rgb(167,117,0)","rgb(214,142,1)",
		"rgb(183,151,98)","rgb(122,73,0)","rgb(55,33,1)",
		"rgb(136,111,76)","rgb(164,91,2)","rgb(231,171,99)",
		"rgb(250,208,159)","rgb(192,185,178)","rgb(147,138,129)",
		"rgb(163,132,105)","rgb(209,97,0)","rgb(167,111,66)",
		"rgb(91,69,52)","rgb(91,50,19)","rgb(202,131,78)",
		"rgb(255,145,63)","rgb(149,63,0)","rgb(208,172,148)",
		"rgb(125,90,68)","rgb(190,71,0)","rgb(253,232,220)",
		"rgb(119,38,0)","rgb(160,88,55)","rgb(234,139,102)",
		"rgb(57,20,6)","rgb(255,104,50)","rgb(200,98,64)",
		"rgb(41,32,29)","rgb(183,123,104)","rgb(128,108,102)",
		"rgb(255,170,146)","rgb(137,65,46)","rgb(232,48,0)",
		"rgb(168,140,133)","rgb(247,201,191)","rgb(100,49,39)",
		"rgb(233,129,118)","rgb(123,79,75)","rgb(30,2,0)",
		"rgb(156,105,102)","rgb(191,86,80)","rgb(186,9,0)",
		"rgb(255,74,70)","rgb(244,171,170)","rgb(69,44,44)",
		"rgb(200,161,161)"
	};

	
	protected static final String[][] indexgradients = new String[][]{
		new String[]{ //1
			"rgb(255,0,0)",
			"rgb(0,128,0)",
			"rgb(0,255,255)",
			"rgb(128,0,128)",
			"rgb(85,0,0)",
			"rgb(212,0,0)",
			"rgb(255,85,85)",
			"rgb(255,213,213)",
			"rgb(120,33,33)",
			"rgb(211,95,95)",
			"rgb(244,215,215)",
			"rgb(108,83,83)",
			"rgb(200,183,183)"
		},
		new String[]{ //2
			"rgb(85,34,0)",
			"rgb(212,85,0)",
			"rgb(255,153,85)",
			"rgb(255,230,213)",
			"rgb(120,68,33)",
			"rgb(211,141,95)",
			"rgb(244,227,215)",
			"rgb(108,93,83)",
			"rgb(200,190,183)",
			"rgb(85,68,0)",
			"rgb(212,170,0)",
			"rgb(255,221,85)",
			"rgb(255,246,213)"
		},
		new String[]{ //3
			"rgb(120,103,33)",
			"rgb(211,188,95)",
			"rgb(255,219,157)",
			"rgb(108,103,83)",
			"rgb(200,196,183)",
			"rgb(68,85,0)",
			"rgb(170,212,0)",
			"rgb(221,255,85)",
			"rgb(246,255,213)",
			"rgb(103,120,33)",
			"rgb(188,211,95)",
			"rgb(238,244,215)",
			"rgb(103,108,83)"
		},
		new String[]{ //4
			"rgb(196,200,183)",
			"rgb(34,85,0)",
			"rgb(85,212,0)",
			"rgb(153,255,85)",
			"rgb(88,40,68)",
			"rgb(68,120,33)",
			"rgb(141,211,95)",
			"rgb(227,244,215)",
			"rgb(93,108,83)",
			"rgb(190,200,183)",
			"rgb(0,85,0)",
			"rgb(0,212,0)",
			"rgb(85,255,85)"
		},
		new String[]{ //5
			"rgb(184,208,180)",
			"rgb(33,120,33)",
			"rgb(95,211,95)",
			"rgb(128,84,16)",
			"rgb(83,108,83)",
			"rgb(183,200,183)",
			"rgb(0,85,34)",
			"rgb(0,212,85)",
			"rgb(85,255,153)",
			"rgb(213,255,230)",
			"rgb(33,120,68)",
			"rgb(95,211,141)",
			"rgb(215,244,227)"
		},
		new String[]{ //6
			"rgb(83,108,93)",
			"rgb(183,200,190)",
			"rgb(0,85,68)",
			"rgb(0,212,170)",
			"rgb(85,255,221)",
			"rgb(213,255,246)",
			"rgb(33,120,103)",
			"rgb(95,211,188)",
			"rgb(215,244,238)",
			"rgb(83,108,103)",
			"rgb(183,200,196)",
			"rgb(0,68,85)",
			"rgb(0,170,212)"
		},
		new String[]{ //7
			"rgb(85,221,255)",
			"rgb(22,68,80)",
			"rgb(33,103,120)",
			"rgb(95,188,211)",
			"rgb(215,238,244)",
			"rgb(83,103,108)",
			"rgb(183,196,200)",
			"rgb(0,34,85)",
			"rgb(0,85,212)",
			"rgb(85,153,255)",
			"rgb(213,229,255)",
			"rgb(33,68,120)",
			"rgb(95,141,211)"
		},
		new String[]{ //8
			"rgb(215,227,244)",
			"rgb(83,93,108)",
			"rgb(183,190,200)",
			"rgb(0,0,85)",
			"rgb(0,0,212)",
			"rgb(85,85,255)",
			"rgb(213,213,255)",
			"rgb(33,33,120)",
			"rgb(95,95,211)",
			"rgb(215,215,244)",
			"rgb(83,83,108)",
			"rgb(183,183,200)",
			"rgb(34,0,85)"
		},
		new String[]{ //9
			"rgb(85,0,212)",
			"rgb(153,85,255)",
			"rgb(229,213,255)",
			"rgb(68,33,120)",
			"rgb(141,95,211)",
			"rgb(227,215,244)",
			"rgb(93,83,108)",
			"rgb(190,183,200)",
			"rgb(68,0,85)",
			"rgb(170,0,212)",
			"rgb(221,85,255)",
			"rgb(246,213,255)",
			"rgb(103,33,120)"
		},
		new String[]{ //10
			"rgb(188,95,211)",
			"rgb(238,215,244)",
			"rgb(103,83,108)",
			"rgb(196,183,200)",
			"rgb(85,0,68)",
			"rgb(212,0,170)",
			"rgb(255,85,221)",
			"rgb(255,213,246)",
			"rgb(120,33,103)",
			"rgb(211,95,188)",
			"rgb(244,215,238)",
			"rgb(108,83,103)",
			"rgb(200,183,196)"
		},
		new String[]{ //11
			"rgb(85,0,34)",
			"rgb(212,0,85)",
			"rgb(255,85,153)",
			"rgb(255,213,229)",
			"rgb(120,33,68)",
			"rgb(211,95,141)",
			"rgb(244,215,227)",
			"rgb(108,83,93)",
			"rgb(200,183,190)",
			"rgb(128,0,0)",
			"rgb(255,255,0)",
			"rgb(236,236,236)",
			"rgb(128,128,0)"
		},
		new String[]{ //12
			"rgb(180,226,255)",
			"rgb(26,26,26)",
			"rgb(102,102,102)",
			"rgb(0,102,0)",
			"rgb(188,184,120)",   
			"rgb(128,128,128)",
			"rgb(60,0,84)",
			"rgb(68,0,88)",
			"rgb(72,0,100)",
			"rgb(80,0,104)",
			"rgb(84,0,116)",
			"rgb(92,0,120)",
			"rgb(96,0,132)"
		},
		new String[]{ //13
			"rgb(104,0,136)",
			"rgb(108,0,148)",
			"rgb(116,0,152)",
			"rgb(124,4,160)",
			"rgb(128,16,164)",
			"rgb(136,28,168)",
			"rgb(140,40,172)",
			"rgb(148,52,180)",
			"rgb(152,64,184)",
			"rgb(160,76,188)",
			"rgb(164,88,192)",
			"rgb(172,100,196)",
			"rgb(176,112,200)"
		},
		new String[]{ //14
			"rgb(184,124,204)",
			"rgb(192,136,208)",
			"rgb(196,148,212)",
			"rgb(204,160,216)",
			"rgb(208,172,220)",
			"rgb(216,184,224)",
			"rgb(220,196,228)",
			"rgb(228,208,236)",
			"rgb(232,220,240)",
			"rgb(240,232,244)",
			"rgb(244,244,248)",
			"rgb(252,252,248)",
			"rgb(252,252,236)"
		}
	};
	
	
	protected static final String[][] indexgradients_old = new String[][]{
		
		new String[]{ //1
			"rgb(250,0,2)",
			"rgb(250,17,17)",
			"rgb(250,34,34)",
			"rgb(250,50,50)",
			"rgb(250,67,67)",
			"rgb(250,84,84)",
			"rgb(250,101,101)",
			"rgb(250,118,118)",
			"rgb(250,135,135)",
			"rgb(250,151,151)",
			"rgb(250,168,168)",
			"rgb(250,185,185)",
			"rgb(250,202,202)"
		},
		new String[]{ //2
			"rgb(206,0,255)",
			"rgb(210,17,255)",
			"rgb(214,33,255)",
			"rgb(218,50,254)",
			"rgb(222,67,254)",
			"rgb(226,83,254)",
			"rgb(230,100,254)",
			"rgb(234,117,254)",
			"rgb(238,133,254)",
			"rgb(242,150,253)",
			"rgb(246,167,253)",
			"rgb(250,183,253)",
			"rgb(254,200,253)"
		},
		new String[]{ //3
			"rgb(0,19,133)",
			"rgb(12,31,139)",
			"rgb(24,43,145)",
			"rgb(36,55,152)",
			"rgb(58,66,158)",
			"rgb(60,78,164)",
			"rgb(72,90,171)",
			"rgb(85,102,177)",
			"rgb(97,114,184)",
			"rgb(109,126,189)",
			"rgb(121,137,196)",
			"rgb(133,149,202)",
			"rgb(145,161,208)"
		},
		new String[]{ //4
			"rgb(46,65,37)",
			"rgb(55,79,46)",
			"rgb(63,93,54)",
			"rgb(72,107,63)",
			"rgb(80,121,72)",
			"rgb(88,135,80)",
			"rgb(97,148,89)",
			"rgb(106,162,98)",
			"rgb(114,176,106)",
			"rgb(123,190,115)",
			"rgb(131,204,124)",
			"rgb(139,218,132)",
			"rgb(148,232,141)"
		},
		new String[]{ //5
			"rgb(197,113,17)",
			"rgb(198,118,26)",
			"rgb(199,122,34)",
			"rgb(201,127,43)",
			"rgb(202,132,51)",
			"rgb(203,136,60)",
			"rgb(205,141,69)",
			"rgb(206,146,77)",
			"rgb(207,150,86)",
			"rgb(208,155,94)",
			"rgb(209,160,103)",
			"rgb(211,164,111)",
			"rgb(212,169,120)"
		},
		new String[]{ //6
			"rgb(66,66,66)",
			"rgb(74,73,73)",
			"rgb(82,81,81)",
			"rgb(91,88,88)",
			"rgb(99,95,95)",
			"rgb(107,102,102)",
			"rgb(116,110,110)",
			"rgb(124,117,117)",
			"rgb(132,124,124)",
			"rgb(140,131,131)",
			"rgb(148,139,139)",
			"rgb(157,146,146)",
			"rgb(165,153,153)"
		},
		new String[]{ //7
			"rgb(59,28,54)",
			"rgb(63,33,59)",
			"rgb(70,39,65)",
			"rgb(75,44,70)",
			"rgb(80,50,75)",
			"rgb(86,56,81)",
			"rgb(91,61,85)",
			"rgb(96,66,91)",
			"rgb(102,72,97)",
			"rgb(107,78,102)",
			"rgb(112,83,107)",
			"rgb(118,88,113)",
			"rgb(123,94,118)"
		},
		new String[]{ //8
			"rgb(255,128,0)",
			"rgb(254,138,11)",
			"rgb(254,147,23)",
			"rgb(253,157,34)",
			"rgb(253,166,45)",
			"rgb(252,176,56)",
			"rgb(251,186,68)",
			"rgb(251,195,79)",
			"rgb(250,205,90)",
			"rgb(250,214,101)",
			"rgb(249,224,113)",
			"rgb(249,233,124)",
			"rgb(248,243,135)"
		},
		new String[]{ //9
			"rgb(59,105,56)",
			"rgb(71,117,58)",
			"rgb(82,130,59)",
			"rgb(94,142,60)",
			"rgb(105,154,62)",
			"rgb(116,167,63)",
			"rgb(128,179,65)",
			"rgb(139,191,66)",
			"rgb(151,204,68)",
			"rgb(162,216,69)",
			"rgb(174,228,71)",
			"rgb(186,241,72)",
			"rgb(197,253,74)"
		},
		new String[]{ //10
			"rgb(107,3,203)",
			"rgb(115,15,207)",
			"rgb(123,28,212)",
			"rgb(132,40,216)",
			"rgb(140,53,220)",
			"rgb(148,65,225)",
			"rgb(157,78,229)",
			"rgb(165,91,233)",
			"rgb(173,103,238)",
			"rgb(181,116,242)",
			"rgb(190,128,246)",
			"rgb(198,141,251)",
			"rgb(206,153,255)"
		},
		new String[]{ //11
			"rgb(221,225,58)",
			"rgb(224,228,66)",
			"rgb(226,230,75)",
			"rgb(229,232,83)",
			"rgb(232,235,91)",
			"rgb(234,237,100)",
			"rgb(237,240,108)",
			"rgb(240,243,116)",
			"rgb(242,245,125)",
			"rgb(245,247,133)",
			"rgb(248,250,141)",
			"rgb(250,253,150)",
			"rgb(253,255,158)"
		},
		new String[]{ //12
			"rgb(203,80,21)",
			"rgb(203,88,21)",
			"rgb(204,95,21)",
			"rgb(204,103,22)",
			"rgb(204,111,22)",
			"rgb(205,118,22)",
			"rgb(205,126,23)",
			"rgb(205,134,23)",
			"rgb(206,141,23)",
			"rgb(206,149,23)",
			"rgb(206,157,24)",
			"rgb(207,164,24)",
			"rgb(207,172,24)"
		},
		new String[]{ //13
			"rgb(1,193,160)",
			"rgb(11,198,166)",
			"rgb(20,203,171)",
			"rgb(30,208,177)",
			"rgb(39,213,183)",
			"rgb(49,218,189)",
			"rgb(58,222,195)",
			"rgb(68,227,200)",
			"rgb(77,232,206)",
			"rgb(87,237,212)",
			"rgb(96,242,218)",
			"rgb(106,247,223)",
			"rgb(115,252,229)"
		},
		new String[]{ //14
			"rgb(125,90,68)",
			"rgb(119,85,65)",
			"rgb(113,81,61)",
			"rgb(106,77,58)",
			"rgb(100,72,54)",
			"rgb(94,68,51)",
			"rgb(88,63,47)",
			"rgb(81,59,44)",
			"rgb(75,54,41)",
			"rgb(69,49,37)",
			"rgb(62,45,34)",
			"rgb(56,40,30)",
			"rgb(50,36,27)"
		}
		//,
//		new String[]{
//			"rgb(233,83,123,0.95)",
//			"rgb(235,104,139,0.95)",
//			"rgb(237,125,155,0.95)",
//			"rgb(239,146,171,0.95)",
//			"rgb(241,167,187,0.95)",
//		},
//		new String[]{ //10
//				"rgb(0,0,0)",
//				"rgb(0,0,0)",
//				"rgb(0,0,0)",
//				"rgb(0,0,0)",
//				"rgb(0,0,0)",
//				"rgb(0,0,0)",
//				"rgb(0,0,0)",
//				"rgb(0,0,0)",
//				"rgb(0,0,0)",
//				"rgb(0,0,0)",
//				"rgb(0,0,0)",
//				"rgb(0,0,0)",
//				"rgb(0,0,0)"
//			}
	};
	
	public static String[] getNColors(int i)
	{
		String[] res = new String[i];
		
		for(int x=0;x<i;x++)
		{
			res[x] = indexcolors[x+1];
		}
		return res;
	}
	
	public static String[][] getNColors(String[] lables)
	{
		int i = lables.length;
		
		String[][] res = new String[i][];
		
		for(int x=0;x<i;x++)
		{
			res[x] = new String[]{lables[x], indexcolors[x+1]};
		}
		return res;
	}
	
	public static Object[] getNColorsRep(String[] lables)
	{
		HashMap<String,Integer> hm = new HashMap<String,Integer>();
		
		String[] res1 = new String[lables.length];
		
		int st = 1;
		
		for(int i=0;i<lables.length;i++)
		{
			if(hm.containsKey(lables[i]))
			{
				res1[i] = indexcolors[hm.get(lables[i])];
			}
			else
			{
				hm.put(lables[i], new Integer(st));
				res1[i] = indexcolors[st];
				st++;
			}
		}
		
		String[] keys = hm.keySet().toArray(new String[]{});
		
		Arrays.sort(keys);
		
		String[][] res2 = new String[keys.length][];
		
		for(int i=0;i<keys.length;i++)
		{
			res2[i] = new String[]{keys[i].toString(),indexcolors2[hm.get(keys[i])]};
		}
		
		return new Object[]{res1,res2};
	}
	
	public static Object[] getNColorsRep(String[] lables, String na)
	{
		HashMap<String,Integer> hm = new HashMap<String,Integer>();
		
		String[] res1 = new String[lables.length];
		
		int st = 1;
		
		for(int i=0;i<lables.length;i++)
		{
			if(hm.containsKey(lables[i]))
			{
				res1[i] = indexcolors[hm.get(lables[i])];
			}
			else
			{
				if(lables[i].equals(na))
				{
					hm.put(lables[i], new Integer(0));
					res1[i] = indexcolors[0];
				}
				else
				{
					hm.put(lables[i], new Integer(st));
					res1[i] = indexcolors[st];
					st++;
				}
			}
		}
		
		String[] keys = hm.keySet().toArray(new String[]{});
		
		Arrays.sort(keys);
		
		String[][] res2 = new String[keys.length][];
		
		for(int i=0;i<keys.length;i++)
		{
			res2[i] = new String[]{keys[i].toString(),indexcolors2[hm.get(keys[i])]};
		}
		
		return new Object[]{res1,res2};
	}
	
	public static Object[] getBinColorsRep(String[] lables, String na, boolean wild)
	{
		boolean founduser = false;
		
		String[] res1 = new String[lables.length];
		
		for(int i=0;i<lables.length;i++)
		{
			if(lables[i].equals(na))
			{
				res1[i] = indexcolors[0];
			}
			else if(lables[i].equals("User input"))
			{
				res1[i] = "rgb(0,102,0,0.95)";
				founduser = true;
			}
			else if((wild && (lables[i].equals("Wild type"))) || lables[i].equals("Stem"))
//			else if((wild && (lables[i].equals("Wild type")) || lables[i].equals("Stem")))
			{
				res1[i] = "rgb(255,0,0,0.95)";
				
			}
			else
			{
				res1[i] = "rgb(0,0,255,0.95)";
			}
		}
		
		String[][] res2;
		
		
		if(!founduser) res2 = new String[3][2];
		else res2 = new String[4][2];
		
		int i=0;
		if(wild) res2[i][0] = "Wild type";
		else res2[i][0] = "Stem";
		res2[i][1] = "rgb(255,0,0)";
		i++;
		if(wild) res2[i][0] = "Treated";
		else res2[i][0] = "Not Stem";
		res2[i][1] = "rgb(0,0,255)";
		i++;
		res2[i][0] = na;
		res2[i][1] = indexcolors2[0];
		
		if(founduser)
		{
			i++;
			res2[i][0] = "User input";
			res2[i][1] = "rgb(0,102,0)";
		}
				
		return new Object[]{res1,res2};
	}
	
	public static Object[] getTriColorsRep(String[] lables)
	{
		boolean founduser = false;
		
		String[] res1 = new String[lables.length];
		
		for(int i=0;i<lables.length;i++)
		{
			if(lables[i].equals("Stem"))
			{
				res1[i] = "rgb(255,0,0,0.95)";
			}
			else if(lables[i].equals("Progenitor"))
			{
				res1[i] = "rgb(0,255,0,0.95)";
			}
			else if(lables[i].equals("Differentiated/Mature"))
			{
				res1[i] = "rgb(0,0,255,0.95)";
				
			}
			else
			{
				res1[i] = "rgb(255,255,255,0.95)";
				founduser = true;
			}
		}
		
		String[][] res2;
		
		
		if(!founduser) res2 = new String[3][2];
		else res2 = new String[4][2];
		
		int i=0;
		res2[i][0] = "Stem";
		res2[i][1] = "rgb(255,0,0)";
		i++;
		res2[i][0] = "Progenitor";
		res2[i][1] = "rgb(0,255,0)";
		i++;
		res2[i][0] = "Differentiated/Mature";
		res2[i][1] = "rgb(0,0,255)";
		
		if(founduser)
		{
			i++;
			res2[i][0] = "User Input";
			res2[i][1] = "rgb(255,255,255)";
		}
				
		return new Object[]{res1,res2};
	}
	
	public static String getGradientColor(int gradient, int color)
	{
		return indexgradients[gradient][color];
	}
	
	public static String[] getNColorsRepN(int n, String lable, String na)
	{
		if(lable.equals(na)) n = 0;
		else n++;
		
		return new String[]{indexcolors[n],indexcolors2[n]};
	}
}
